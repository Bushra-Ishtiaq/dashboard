{"version":3,"sources":["components/widgetText.js","components/widgetBar.js","components/widgetDoughnut.js","components/dashboard.js","App.js","index.js"],"names":["widgetText","props","className","title","class","value","description","ReactFC","fcRoot","FusionCharts","Chart","FusionTheme","widgetBar","chartConfigs","type","width","height","dataFormat","dataSource","chart","bgColor","theme","data","widgetDoughnut","config","url","Dashboard","getData","arg","arr","state","items","arrLen","length","organicSource","directSource","referralSource","pageViews","users","newUsers","sourceArr","usersArr","i","organic_source","direct_source","referral_source","page_views","new_users","push","label","setState","console","log","updateDashboard","event","selectedValue","dropdownOptions","fetch","then","response","json","batchRowValues","valueRanges","values","rows","rowObject","j","month","Array","from","Set","reverse","Container","fluid","Row","Col","options","this","onChange","placeholder","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9517f470.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction widgetText(props) {\r\n    return (\r\n        <div className=\"widgetWrap\">\r\n            <div className=\"widgetTitle\">\r\n                {props.title}\r\n            </div>\r\n            <div className=\"widgetValue\">\r\n                <div class=\"value\">{props.value}</div>\r\n                <div class=\"description\">{props.description}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default widgetText;\r\n","import React from 'react'\r\nimport ReactFC from \"react-fusioncharts\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport Chart from \"fusioncharts/fusioncharts.charts\";\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\nReactFC.fcRoot(FusionCharts, Chart, FusionTheme);\r\n\r\nfunction widgetBar(props) {\r\n\r\n    // Create a JSON object to store the chart configurations\r\n    const chartConfigs = {\r\n        type: \"bar2d\", // The chart type\r\n        width: \"100%\", // Width of the chart\r\n        height: \"125\", // Height of the chart\r\n        dataFormat: \"json\", // Data type\r\n        dataSource: {\r\n            // Chart Configuration\r\n            chart: {\r\n                bgColor: \"#2a2a2a\",\r\n                theme: \"fusion\" //Set the theme for your chart\r\n            },\r\n            // Chart Data - from step 2\r\n            data: props.data\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"widgetWrap\">\r\n            <div className=\"widgetTitle\">\r\n                {props.title}\r\n            </div>\r\n            <div className=\"widgetValue\">\r\n                <ReactFC {...chartConfigs} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default widgetBar;\r\n","import React from 'react'\r\nimport ReactFC from \"react-fusioncharts\";\r\nimport FusionCharts from \"fusioncharts\";\r\nimport Chart from \"fusioncharts/fusioncharts.charts\";\r\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\r\nReactFC.fcRoot(FusionCharts, Chart, FusionTheme);\r\n\r\nfunction widgetDoughnut(props) {\r\n\r\n    // Create a JSON object to store the chart configurations\r\n    const chartConfigs = {\r\n        type: \"doughnut2d\", // The chart type\r\n        width: \"100%\", // Width of the chart\r\n        height: \"125\", // Height of the chart\r\n        dataFormat: \"json\", // Data type\r\n        dataSource: {\r\n            // Chart Configuration\r\n            chart: {\r\n                bgColor: \"#2a2a2a\",\r\n                theme: \"fusion\" //Set the theme for your chart\r\n            },\r\n            // Chart Data - from step 2\r\n            data: props.data\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"widgetWrap\">\r\n            <div className=\"widgetTitle\">\r\n                {props.title}\r\n            </div>\r\n            <div className=\"widgetValue\">\r\n                <ReactFC {...chartConfigs} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default widgetDoughnut;","// import React, { Component } from 'react'\r\n// import './dashboard.css';\r\n// import { Col, Row, Container } from 'react-bootstrap';\r\n// import WidgetText from './widgetText';\r\n// import WidgetBar from './widgetBar';\r\n// import widgetText from './widgetText';\r\n// import WidgetDoughnut from './widgetDoughnut';\r\n// import Dropdown from 'react-dropdown';\r\n// import 'react-dropdown/style.css';\r\n\r\n// // excel import  \r\n// const config = {\r\n//     apiKey: 'AIzaSyDMu-Vw30ykPPmFT3cXeunzKEi4EahzglI',\r\n//     spreadsheetId: '1vcDPrMexD8bxNwwzK9IxF8wch6Hfezq2eooJACDiqgg'\r\n// }\r\n// const url = `https://sheets.googleapis.com/v4/spreadsheets/${config.spreadsheetId\r\n//     }/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=${config.apiKey}`;\r\n\r\n\r\n// class dashboard extends Component {\r\n\r\n//     constructor() {\r\n//         super();\r\n//         this.state = {\r\n//             items: [],\r\n//             dropdownOptions: [],\r\n//             selectedValue: null,\r\n//             OrganicSource: null,\r\n//             directSource: null,\r\n//             referralSource: null,\r\n//             pageViews: null,\r\n//             users: null,\r\n//             newUsers: null,\r\n//             sourceArr: []\r\n\r\n//         }\r\n//     }\r\n//     getData = arg => {\r\n//         const arr = this.state.items;\r\n//         const arrLen = arr.length;\r\n\r\n//         let organicSource = 0;\r\n//         let directSource = 0;\r\n//         let referralSource = 0;\r\n//         let pageViews = 0;\r\n//         let users = 0;\r\n//         let newUsers = 0;\r\n//         let selectedValue = null;\r\n//         let sourceArr = [];\r\n\r\n//         for (let i = 0; i < arrLen; i++) {\r\n//             if (arg == arr[i][\"month\"]) {\r\n//                 organicSource = arr[i].organic_source;\r\n//                 directSource = arr[i].direct_source;\r\n//                 referralSource = arr[i].referral_source;\r\n//                 pageViews = arr[i].page_views;\r\n//                 users = arr[i].users;\r\n//                 newUsers = arr[i].new_users;\r\n//                 sourceArr.push(\r\n//                     {\r\n//                         label: \"Venezuela\",\r\n//                         value: \"290\"\r\n//                     },\r\n//                     {\r\n//                         label: \"Saudi\",\r\n//                         value: \"260\"\r\n//                     },\r\n//                     {\r\n//                         label: \"Canada\",\r\n//                         value: \"180\"\r\n//                     }\r\n//                 )\r\n//             }\r\n\r\n//         }\r\n\r\n\r\n//         selectedValue = arg;\r\n\r\n//         this.setState({\r\n//             organicSource: organicSource,\r\n//             directSource: directSource,\r\n//             referralSource: referralSource,\r\n//             pageViews: pageViews,\r\n//             users: users,\r\n//             newUsers: newUsers,\r\n//         }\r\n//         )\r\n\r\n//         updateDashboard = event => {\r\n//             this.getData(event.value);\r\n//             this.setState({ selectedValue: event.value });\r\n//         }\r\n\r\n//         componentDidMount() {\r\n//             fetch(url)\r\n//                 .then(Response => Response.json())\r\n//                 .then(data => {\r\n\r\n//                     let batchRowValues = data.valueRanges[0].values;\r\n\r\n//                     const rows = [];\r\n\r\n//                     for (let i = 1; i < batchRowValues.length; i++) {\r\n//                         let rowObject = {};\r\n//                         for (let j = 0; j < batchRowValues[i].length; j++) {\r\n//                             rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\r\n//                         }\r\n//                         rows.push(rowObject);\r\n//                     }\r\n\r\n//                     // dropdown options\r\n//                     let dropdownOptions = [];\r\n\r\n//                     for (let i = 0; i < rows.length; i++) {\r\n//                         dropdownOptions.push(rows[i].month);\r\n//                     }\r\n\r\n//                     dropdownOptions = Array.from(new Set(dropdownOptions)).reverse();\r\n//                     this.setState(\r\n//                         {\r\n//                             items: rows,\r\n//                             dropdownOptions: dropdownOptions,\r\n//                             selectedValue: \"Jan 2018\"\r\n//                         },\r\n//                         () => this.getData(\"Jan 2018\")\r\n//                     );\r\n\r\n//                 });\r\n//         }\r\n\r\n//         render() {\r\n\r\n//             return (\r\n//                 <div>\r\n//                     <Container fluid>\r\n//                         <Row className=\"TopHeader\">\r\n//                             <Col>\r\n//                                 Dashboard\r\n//                         </Col>\r\n//                             <Col>\r\n//                                 <Dropdown options={this.state.dropdownOptions} onChange={this.updateDashboard} value={this.state.selectedValue} placeholder=\"Select an option\" />\r\n//                             </Col>\r\n//                         </Row>\r\n//                     </Container>\r\n//                     <Container className=\"mainDashboard\">\r\n//                         <Row>\r\n//                             <Col>\r\n//                                 <WidgetText title=\"Organic Source\" value={this.state.organicSource} />\r\n//                             </Col>\r\n//                             <Col>\r\n//                                 <WidgetText title=\"Organic Source\" value={this.state.directSource} />\r\n//                             </Col>\r\n//                             <Col>\r\n//                                 <WidgetText title=\"Organic Source\" value={this.state.referralSource} />\r\n//                             </Col>\r\n//                             <Col>\r\n//                                 <WidgetText title=\"Organic Source\" value={this.state.pageViews} />\r\n//                             </Col>\r\n//                         </Row>\r\n\r\n//                         <Row>\r\n//                             <Col>\r\n//                                 <WidgetText title=\"Users\" value={this.state.organicSource} />\r\n//                             </Col>\r\n//                             <Col>\r\n//                                 <WidgetText title=\"New Users\" value={this.state.directSource} />\r\n//                             </Col>\r\n//                             <Col>\r\n//                             </Col>\r\n//                             <Col>\r\n//                             </Col>\r\n//                         </Row>\r\n//                     </Container>\r\n//                 </div>\r\n\r\n//             );\r\n//         }\r\n\r\n//         export default dashboard;\r\n\r\nimport React, { Component } from 'react'\r\nimport './dashboard.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport WidgetText from './widgetText';\r\nimport WidgetBar from './widgetBar';\r\nimport WidgetDoughnut from './widgetDoughnut';\r\nimport Dropdown from 'react-dropdown';\r\nimport 'react-dropdown/style.css';\r\n\r\n\r\n//excel import\r\nconst config = {\r\n    apiKey: 'AIzaSyDMu-Vw30ykPPmFT3cXeunzKEi4EahzglI',\r\n    spreadsheetId: '1vcDPrMexD8bxNwwzK9IxF8wch6Hfezq2eooJACDiqgg'\r\n}\r\nconst url = `https://sheets.googleapis.com/v4/spreadsheets/${config.spreadsheetId\r\n    }/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=${config.apiKey}`;\r\n\r\n\r\n\r\n\r\nclass Dashboard extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            items: [],\r\n            dropdownOptions: [],\r\n            selectedValue: null,\r\n            organicSource: null,\r\n            directSource: null,\r\n            referralSource: null,\r\n            pageViews: null,\r\n            users: null,\r\n            newUsers: null,\r\n            sourceArr: [],\r\n            usersArr: []\r\n        }\r\n    }\r\n\r\n    getData = arg => {\r\n        const arr = this.state.items;\r\n        const arrLen = arr.length;\r\n\r\n        let organicSource = 0;\r\n        let directSource = 0;\r\n        let referralSource = 0;\r\n        let pageViews = 0;\r\n        let users = 0;\r\n        let newUsers = 0;\r\n        let selectedValue = null;\r\n        let sourceArr = [];\r\n        let usersArr = [];\r\n\r\n        for (let i = 0; i < arrLen; i++) {\r\n            if (arg == arr[i][\"month\"]) {\r\n                organicSource = arr[i].organic_source;\r\n                directSource = arr[i].direct_source;\r\n                referralSource = arr[i].referral_source;\r\n                pageViews = arr[i].page_views;\r\n                users = arr[i].users;\r\n                newUsers = arr[i].new_users;\r\n                sourceArr.push(\r\n                    {\r\n                        label: \"Wheat\",\r\n                        value: arr[i].organic_source\r\n                    },\r\n                    {\r\n                        label: \"Rice\",\r\n                        value: arr[i].direct_source\r\n                    },\r\n                    {\r\n                        label: \"Barley\",\r\n                        value: arr[i].referral_source\r\n                    }\r\n                );\r\n                usersArr.push(\r\n                    // Fetching the chart data\r\n                    {\r\n                        label: \"Users\",\r\n                        value: arr[i].users\r\n                    },\r\n                    {\r\n                        label: \"New Users\",\r\n                        value: arr[i].new_users\r\n                    },\r\n                    {\r\n                        label: \"Profit\",\r\n                        value: arr[i].page_views\r\n                    }\r\n                );\r\n            }\r\n        }\r\n\r\n        selectedValue = arg;\r\n\r\n        this.setState({\r\n            organicSource: organicSource,\r\n            directSource: directSource,\r\n            referralSource: referralSource,\r\n            pageViews: pageViews,\r\n            users: users,\r\n            newUsers: newUsers,\r\n            sourceArr: sourceArr,\r\n            usersArr: usersArr\r\n        }, () => {\r\n            console.log(this.state.referralSource);\r\n        }\r\n        )\r\n    }\r\n\r\n    updateDashboard = event => {\r\n        this.getData(event.value);\r\n        this.setState({ selectedValue: event.value }, () => {\r\n            console.log(this.state.users);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n\r\n                let batchRowValues = data.valueRanges[0].values;\r\n\r\n                const rows = [];\r\n\r\n                for (let i = 1; i < batchRowValues.length; i++) {\r\n                    let rowObject = {};\r\n                    for (let j = 0; j < batchRowValues[i].length; j++) {\r\n                        rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\r\n                    }\r\n                    rows.push(rowObject);\r\n                }\r\n\r\n                // dropdown options\r\n                let dropdownOptions = [];\r\n\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    dropdownOptions.push(rows[i].month);\r\n                }\r\n\r\n                dropdownOptions = Array.from(new Set(dropdownOptions)).reverse();\r\n                this.setState(\r\n                    {\r\n                        items: rows,\r\n                        dropdownOptions: dropdownOptions,\r\n                        selectedValue: \"Jan 2018\"\r\n                    },\r\n                    () => this.getData(\"Jan 2018\")\r\n                );\r\n\r\n\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container fluid>\r\n                    <Row className=\"TopHeader\">\r\n                        <Col>\r\n                            Product Dashboard\r\n                         </Col>\r\n                         <Col>\r\n                            <Dropdown options={this.state.dropdownOptions} onChange={this.updateDashboard} value={this.state.selectedValue} placeholder=\"Select an option\" />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Container>\r\n                <Container className=\"mainDashboard\">\r\n                    <Row>\r\n                        <Col>\r\n                            <WidgetText title=\"Wheat\" value={this.state.organicSource} />\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetText title=\"Rice\" value={this.state.directSource} />\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetText title=\"Barley\" value={this.state.referralSource} />\r\n                        </Col>                             <Col>\r\n                            <WidgetText title=\"Profit\" value={this.state.pageViews} />\r\n                        </Col>                         </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <WidgetText title=\"Users\" value={this.state.organicSource} />\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetText title=\"New Users\" value={this.state.directSource} />\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetBar title=\"Product Level Comparison\" data={this.state.sourceArr} />\r\n                        </Col>\r\n                        <Col>\r\n                            <WidgetDoughnut title=\"Source Comparison\" data={this.state.usersArr} />\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n\r\n","import { Component } from 'react';\nimport Dashboard from './components/dashboard';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// ReactDOM.render(document.getElementById('root'));\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}